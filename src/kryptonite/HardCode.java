package kryptonite;

import battlecode.common.*;

import static kryptonite.Communication.*;
import static kryptonite.Constants.*;
import static kryptonite.Debug.*;
import static kryptonite.Map.*;

public class HardCode {

//	public static int[][][] netGunLU = new int[][][]{{{3,1},{3,2},{3,3},{2,3},{1,3}},{{-3,1},{-3,2},{-3,3},{-2,3},{-1,3}},{{-3,-1},{-3,-2},{-3,-3},{-2,-3},{-1,-3}},{{3,-1},{3,-2},{3,-3},{2,-3},{1,-3}}};
	public static int[][][] netGunLU = new int[][][]{{{3,2},{2,3}},{{-3,2},{-2,3}},{{-3,-2},{-2,-3}},{{3,-2},{2,-3}}};
	public static int[][] netGunBuildLocations = new int[][]{{2,2},{-2,2},{-2,-2},{2,-2}};

	/*
	Returns an array that contains all of the senseable dx/dy/mag positions for a given RobotType
	Sorted by distanceSquared
	*/
	public static int[][] getSenseDirections (RobotType rt) {
		switch (rt) {
			case DELIVERY_DRONE: // sensorRadiusSquared = 24
			case DESIGN_SCHOOL: // sensorRadiusSquared = 24
			case FULFILLMENT_CENTER: // sensorRadiusSquared = 24
			case LANDSCAPER: // sensorRadiusSquared = 24
			case NET_GUN: // sensorRadiusSquared = 24
			case REFINERY: // sensorRadiusSquared = 24
			case VAPORATOR: // sensorRadiusSquared = 24
				return new int[][] {{0,0,0},{-1,0,1},{0,-1,1},{0,1,1},{1,0,1},{-1,-1,2},{-1,1,2},{1,-1,2},{1,1,2},{-2,0,4},{0,-2,4},{0,2,4},{2,0,4},{-2,-1,5},{-2,1,5},{-1,-2,5},{-1,2,5},{1,-2,5},{1,2,5},{2,-1,5},{2,1,5},{-2,-2,8},{-2,2,8},{2,-2,8},{2,2,8},{-3,0,9},{0,-3,9},{0,3,9},{3,0,9},{-3,-1,10},{-3,1,10},{-1,-3,10},{-1,3,10},{1,-3,10},{1,3,10},{3,-1,10},{3,1,10},{-3,-2,13},{-3,2,13},{-2,-3,13},{-2,3,13},{2,-3,13},{2,3,13},{3,-2,13},{3,2,13},{-4,0,16},{0,-4,16},{0,4,16},{4,0,16},{-4,-1,17},{-4,1,17},{-1,-4,17},{-1,4,17},{1,-4,17},{1,4,17},{4,-1,17},{4,1,17},{-3,-3,18},{-3,3,18},{3,-3,18},{3,3,18},{-4,-2,20},{-4,2,20},{-2,-4,20},{-2,4,20},{2,-4,20},{2,4,20},{4,-2,20},{4,2,20}};
			case HQ: // sensorRadiusSquared = 48
				return new int[][] {{0,0,0},{-1,0,1},{0,-1,1},{0,1,1},{1,0,1},{-1,-1,2},{-1,1,2},{1,-1,2},{1,1,2},{-2,0,4},{0,-2,4},{0,2,4},{2,0,4},{-2,-1,5},{-2,1,5},{-1,-2,5},{-1,2,5},{1,-2,5},{1,2,5},{2,-1,5},{2,1,5},{-2,-2,8},{-2,2,8},{2,-2,8},{2,2,8},{-3,0,9},{0,-3,9},{0,3,9},{3,0,9},{-3,-1,10},{-3,1,10},{-1,-3,10},{-1,3,10},{1,-3,10},{1,3,10},{3,-1,10},{3,1,10},{-3,-2,13},{-3,2,13},{-2,-3,13},{-2,3,13},{2,-3,13},{2,3,13},{3,-2,13},{3,2,13},{-4,0,16},{0,-4,16},{0,4,16},{4,0,16},{-4,-1,17},{-4,1,17},{-1,-4,17},{-1,4,17},{1,-4,17},{1,4,17},{4,-1,17},{4,1,17},{-3,-3,18},{-3,3,18},{3,-3,18},{3,3,18},{-4,-2,20},{-4,2,20},{-2,-4,20},{-2,4,20},{2,-4,20},{2,4,20},{4,-2,20},{4,2,20},{-5,0,25},{-4,-3,25},{-4,3,25},{-3,-4,25},{-3,4,25},{0,-5,25},{0,5,25},{3,-4,25},{3,4,25},{4,-3,25},{4,3,25},{5,0,25},{-5,-1,26},{-5,1,26},{-1,-5,26},{-1,5,26},{1,-5,26},{1,5,26},{5,-1,26},{5,1,26},{-5,-2,29},{-5,2,29},{-2,-5,29},{-2,5,29},{2,-5,29},{2,5,29},{5,-2,29},{5,2,29},{-4,-4,32},{-4,4,32},{4,-4,32},{4,4,32},{-5,-3,34},{-5,3,34},{-3,-5,34},{-3,5,34},{3,-5,34},{3,5,34},{5,-3,34},{5,3,34},{-6,0,36},{0,-6,36},{0,6,36},{6,0,36},{-6,-1,37},{-6,1,37},{-1,-6,37},{-1,6,37},{1,-6,37},{1,6,37},{6,-1,37},{6,1,37},{-6,-2,40},{-6,2,40},{-2,-6,40},{-2,6,40},{2,-6,40},{2,6,40},{6,-2,40},{6,2,40},{-5,-4,41},{-5,4,41},{-4,-5,41},{-4,5,41},{4,-5,41},{4,5,41},{5,-4,41},{5,4,41},{-6,-3,45},{-6,3,45},{-3,-6,45},{-3,6,45},{3,-6,45},{3,6,45},{6,-3,45},{6,3,45}};
			case MINER: // sensorRadiusSquared = 35
				return new int[][] {{0,0,0},{-1,0,1},{0,-1,1},{0,1,1},{1,0,1},{-1,-1,2},{-1,1,2},{1,-1,2},{1,1,2},{-2,0,4},{0,-2,4},{0,2,4},{2,0,4},{-2,-1,5},{-2,1,5},{-1,-2,5},{-1,2,5},{1,-2,5},{1,2,5},{2,-1,5},{2,1,5},{-2,-2,8},{-2,2,8},{2,-2,8},{2,2,8},{-3,0,9},{0,-3,9},{0,3,9},{3,0,9},{-3,-1,10},{-3,1,10},{-1,-3,10},{-1,3,10},{1,-3,10},{1,3,10},{3,-1,10},{3,1,10},{-3,-2,13},{-3,2,13},{-2,-3,13},{-2,3,13},{2,-3,13},{2,3,13},{3,-2,13},{3,2,13},{-4,0,16},{0,-4,16},{0,4,16},{4,0,16},{-4,-1,17},{-4,1,17},{-1,-4,17},{-1,4,17},{1,-4,17},{1,4,17},{4,-1,17},{4,1,17},{-3,-3,18},{-3,3,18},{3,-3,18},{3,3,18},{-4,-2,20},{-4,2,20},{-2,-4,20},{-2,4,20},{2,-4,20},{2,4,20},{4,-2,20},{4,2,20},{-5,0,25},{-4,-3,25},{-4,3,25},{-3,-4,25},{-3,4,25},{0,-5,25},{0,5,25},{3,-4,25},{3,4,25},{4,-3,25},{4,3,25},{5,0,25},{-5,-1,26},{-5,1,26},{-1,-5,26},{-1,5,26},{1,-5,26},{1,5,26},{5,-1,26},{5,1,26},{-5,-2,29},{-5,2,29},{-2,-5,29},{-2,5,29},{2,-5,29},{2,5,29},{5,-2,29},{5,2,29},{-4,-4,32},{-4,4,32},{4,-4,32},{4,4,32},{-5,-3,34},{-5,3,34},{-3,-5,34},{-3,5,34},{3,-5,34},{3,5,34},{5,-3,34},{5,3,34}};
		}
		logi("ERROR: Failed sanity check - cannot find hardcoded senseDirections for RobotType " + rt);
		return null;
	}

	/*
	Returns an array that contains all of dx/dy/mag positions that a Net Gun/HQ can shoot
	Sorted by distanceSquared
	Current shoot radius = 15
	*/
	public static int[][] getShootDirections () {
		return new int[][] {{0,0,0},{-1,0,1},{0,-1,1},{0,1,1},{1,0,1},{-1,-1,2},{-1,1,2},{1,-1,2},{1,1,2},{-2,0,4},{0,-2,4},{0,2,4},{2,0,4},{-2,-1,5},{-2,1,5},{-1,-2,5},{-1,2,5},{1,-2,5},{1,2,5},{2,-1,5},{2,1,5},{-2,-2,8},{-2,2,8},{2,-2,8},{2,2,8},{-3,0,9},{0,-3,9},{0,3,9},{3,0,9},{-3,-1,10},{-3,1,10},{-1,-3,10},{-1,3,10},{1,-3,10},{1,3,10},{3,-1,10},{3,1,10},{-3,-2,13},{-3,2,13},{-2,-3,13},{-2,3,13},{2,-3,13},{2,3,13},{3,-2,13},{3,2,13}};
	}

//	public static int[][] getZoneLocations() {
//		return new int[][]{{0,0},{0,1},{1,0},{1,1},{0,2},{2,0},{1,2},{2,1},{2,2},{0,3},{3,0},{1,3},{3,1},{2,3},{3,2},{0,4},{4,0},{1,4},{4,1},{3,3},{2,4},{4,2},{0,5},{3,4},{4,3},{5,0},{1,5},{5,1},{2,5},{5,2},{4,4},{3,5},{5,3},{0,6},{6,0},{1,6},{6,1},{2,6},{6,2},{4,5},{5,4},{3,6},{6,3},{0,7},{7,0},{1,7},{5,5},{7,1},{4,6},{6,4},{2,7},{7,2},{3,7},{7,3},{5,6},{6,5},{0,8},{8,0},{1,8},{4,7},{7,4},{8,1},{2,8},{8,2},{6,6},{3,8},{8,3},{5,7},{7,5},{4,8},{8,4},{0,9},{9,0},{1,9},{9,1},{2,9},{6,7},{7,6},{9,2},{5,8},{8,5},{3,9},{9,3},{4,9},{9,4},{7,7},{0,10},{6,8},{8,6},{10,0},{1,10},{10,1},{2,10},{10,2},{5,9},{9,5},{3,10},{10,3},{7,8},{8,7},{4,10},{10,4},{6,9},{9,6},{0,11},{11,0},{1,11},{11,1},{2,11},{5,10},{10,5},{11,2},{8,8},{3,11},{7,9},{9,7},{11,3},{6,10},{10,6},{4,11},{11,4},{0,12},{12,0},{1,12},{8,9},{9,8},{12,1},{5,11},{11,5},{2,12},{12,2},{7,10},{10,7},{3,12},{12,3},{6,11},{11,6},{4,12},{12,4},{9,9},{8,10},{10,8},{0,13},{5,12},{12,5},{13,0},{1,13},{7,11},{11,7},{13,1},{2,13},{13,2},{3,13},{13,3},{6,12},{12,6},{9,10},{10,9},{4,13},{8,11},{11,8},{13,4},{7,12},{12,7},{5,13},{13,5},{0,14},{14,0},{1,14},{14,1},{2,14},{10,10},{14,2},{9,11},{11,9},{3,14},{6,13},{13,6},{14,3},{8,12},{12,8},{4,14},{14,4},{7,13},{13,7},{5,14},{10,11},{11,10},{14,5},{0,15},{9,12},{12,9},{15,0},{1,15},{15,1},{2,15},{15,2},{6,14},{14,6},{8,13},{13,8},{3,15},{15,3},{4,15},{15,4},{11,11},{10,12},{12,10},{7,14},{14,7},{5,15},{9,13},{13,9},{15,5},{8,14},{14,8},{6,15},{15,6},{11,12},{12,11},{10,13},{13,10},{7,15},{15,7},{9,14},{14,9},{12,12},{8,15},{15,8},{11,13},{13,11},{10,14},{14,10},{9,15},{15,9},{12,13},{13,12},{11,14},{14,11},{10,15},{15,10},{13,13},{12,14},{14,12},{11,15},{15,11},{13,14},{14,13},{12,15},{15,12},{14,14},{13,15},{15,13},{14,15},{15,14},{15,15}};
//	}
}
